#!/bin/bash
# $Id: mboard-config.in 1871 2009-06-12 13:58:18Z lsc $
# ===========================================================================
#
# Copyright (c) 2009 STFC Rutherford Appleton Laboratory 
# Author: Lee-Shawn Chin 
# Date  : May 2009
#
# File  : mboard-config
# Desc  : Script to output compilation flags needed to compile external
#         programs with libmboard. 
#         Also provide option to display configuration/compilation details
#         of local installation of libmboard.
#
# ===========================================================================

###--- Static Parameters ----------------------------------------------------

# LIBS flags needed to load each library type
MB_LIB_SERIAL="-lmboard_s"
MB_LIB_PARALLEL="-lmboard_p"
MB_LIB_SERIAL_DEBUG="-lmboard_sd"
MB_LIB_PARALLEL_DEBUG="-lmboard_pd"

# Exit codes
SUCCESS=0
ERR_USAGE=1
ERR_NOPARALLEL=2

###--- Installation Specific Parameters -------------------------------------

# Package information
MB_PACKAGE_NAME="libmboard"
MB_PACKAGE_VERSION="0.2.1"
MB_PACKAGE_BUGREPORT="shawn.chin@_NOSPAM_stfc.ac.uk"

# General config source details
MB_CONFIG_DIR="/home/rzk76414/src/libmboard-0.2.1"
MB_CONFIG_ARGS="'--disable-parallel' '--disable-tests' '--prefix=/home/rzk76414/build/libmboard-0.2.1'"
MB_CONFIG_DATE="Thu Oct  1 12:37:55 GMTST 2009"

# Installation directories
MB_INSTALL_PREFIX="/home/rzk76414/build/libmboard-0.2.1"
MB_INSTALL_INCLUDEDIR="/home/rzk76414/build/libmboard-0.2.1/include"
MB_INSTALL_BINDIR="/home/rzk76414/build/libmboard-0.2.1/bin"
MB_INSTALL_LIBDIR="/home/rzk76414/build/libmboard-0.2.1/lib"

# base flags common to all libraries
MB_DEFAULT_LDFLAGS=""
MB_DEFAULT_CFLAGS="-fno-common -std=c99 -Wall -pedantic -Wextra -Wstrict-prototypes -Wmissing-prototypes -Wpointer-arith -Wreturn-type -Wswitch -Wshadow -Wcast-align -Wunused"
MB_DEFAULT_LIBS="-lm"

# base flags used to compile production/debug version of libraries
MB_PRODUCTION_CFLAGS="-DNDEBUG -O3"
MB_DEBUG_CFLAGS="-g -D_EXTRA_CHECKS"

# flags used to compile parallel libraries (flags for threads + mpi)
MB_PARALLEL_LDFLAGS=""
MB_PARALLEL_CFLAGS=""
MB_PARALLEL_LIBS=""

# flags used to include pthread support
MB_PTHREADS_LDFLAGS=""
MB_PTHREADS_CFLAGS=""
MB_PTHREADS_LIBS=""

# flags used to include cunit support
MB_CUNIT_LDFLAGS=""
MB_CUNIT_CFLAGS=""
MB_CUNIT_LIBS=""

# flags used to include memlog support
MB_MEMLOG_CFLAGS="-D_LOG_MEMORY_USAGE"

# flags used to include mpi support (if mpi compile wrapper not used)
MB_MPI_LDFLAGS=""
MB_MPI_CFLAGS=""
MB_MPI_LIBS=""

# compiler used to compile library
MB_DEFAULT_CC="gcc"

# flags to indicate what features/options were enabled
MB_WANT_PARALLEL=0
MB_WANT_MEMLOG=0
MB_WANT_TESTS=0


###--- Functions ------------------------------------------------------------

# print brief usage info. 
# If arg provided, use $1 as exit code, else exit with 0
function rtfm {

    cat << EOF

Usage: mboard-config [-cdlLmpqsv] [--query]  [--version]  [--usage] [--help] 
                                  [--serial] [--parallel] [--debug] [--mpi] 
                                  [--cflags] [--ldflags]  [--libs]

Try 'mboard-config --help' or 'mboard-config --usage' for more information.
EOF

	# If no arguments given, return with SUCCESS code
    if [ "$1" == "" ] 
    then
        exit $SUCCESS
    else
        exit $1
    fi
}

# print library version
function print_version {
	echo ""
    echo "  Message Board Library (Version $MB_PACKAGE_VERSION)"
    echo "  Copyright (c) 2009 STFC Rutherford Appleton Laboratory"
    echo ""
    echo "For info on package configuration, run $0 --query"
}

# print full usage info and exit successfully
function print_usage {

	cat << EOF
Message Board Library (Version $MB_PACKAGE_VERSION)
Copyright (c) 2009 STFC Rutherford Appleton Laboratory

Usage: mboard-config [OPTION]...

mboard-config is the Message Board Library  configuration  utility.  It
should  be  used by  application developers  to determine the necessary
compiler and linker flags needed to compile their application with  the
Message Board Library (libmboard). It can also be  used  to  query  the
configuration and compilation options used in the local installation of
the library.
    
mboard-config --version  # Show libmboard version
mboard-config --query    # Show options used to compile libmboard
mboard-config [--serial|--parallel] [--mpi] [--debug] --cflags
mboard-config [--serial|--parallel] [--mpi] [--debug] --ldflags
mboard-config [--serial|--parallel] [--mpi] [--debug] --libs

Example:
gcc 'mboard-config --cflags'  -c test.c
gcc 'mboard-config --ldflags' -o program test.o 'mboard-config --libs'


More Options:

  -q, --query     Show configuration details of Message Board Library
  -v, --version   Show Message Board Library version
  
  -c, --cflags    Display neccessary compiler flags to use libmboard
  -l, --ldflags   Display neccessary linker flags to use libmboard
  -L, --libs      Display neccessary libraries to use libmboard
  
  -s, --serial    Use serial libmboard (default)
  -p, --parallel  Use parallel libmboard
  
  -d, --debug     Use debug version of libmboard
  -m, --mpi       Include flags to provide support for MPI. Necessary
                  if your compiler does not automatically include
                  support for MPI.
  
  -u, --usage     Give this help list
  -h, --help      Give this help list


Report bugs to $MB_PACKAGE_BUGREPORT.
EOF

    exit $SUCCESS
}


# print config/compile details of local installation of library
function print_query {

    cat << EOF

----- [ General Info ] --------------------------------
Name              : Message Board Library
Version           : $MB_PACKAGE_VERSION
Config directory  : $MB_CONFIG_DIR
Config date       : $MB_CONFIG_DATE
Config arguments  : $MB_CONFIG_ARGS

----- [ Installation paths ] --------------------------
Install path      : $MB_INSTALL_PREFIX
bin directory     : $MB_INSTALL_BINDIR
lib directory     : $MB_INSTALL_LIBDIR
include directory : $MB_INSTALL_INCLUDEDIR

----- [ Compilation details ] -------------------------
Compiler used     : $MB_DEFAULT_CC

# libmboard_s.a (Serial library, production)
Compiler flags    : $MB_DEFAULT_CFLAGS $MB_PRODUCTION_CFLAGS
Linker options    : $MB_DEFAULT_LDFLAGS $MB_DEFAULT_LIBS

# libmboard_sd.a (Serial library, debug)
Compiler flags    : $MB_DEFAULT_CFLAGS $MB_DEBUG_CFLAGS
Linker options    : $MB_DEFAULT_LDFLAGS $MB_DEFAULT_LIBS

EOF

    if [ $MB_WANT_PARALLEL -eq 1 ]
    then
        cat << EOF
# libmboard_p.a (Parallel library, production)
Compiler flags    : $MB_DEFAULT_CFLAGS $MB_PARALLEL_CFLAGS $MB_PRODUCTION_CFLAGS
Linker options    : $MB_PARALLEL_LDFLAGS $MB_PARALLEL_LIBS

# libmboard_pd.a (Parallel library, debug)
Compiler flags    : $MB_DEFAULT_CFLAGS $MB_PARALLEL_CFLAGS $MB_DEBUG_CFLAGS
Linker options    : $MB_PARALLEL_LDFLAGS $MB_PARALLEL_LIBS

EOF
    else
        echo "!! NOTE: Parallel support DISABLED during installation"
    fi

    # If library was compiled with --enable-memlog, print notice
    if [ $MB_WANT_MEMLOG -eq 1 ]
    then
        print_memlog_warning
    fi    

    exit $SUCCESS
}

# print warning regarding memlog
function print_memlog_warning {

    cat << EOF >&2

(mboard-config) NOTICE: Memory usage logging is ENABLED (configured with 
                --enable-memlog). Instrumentation of memory management 
                routines will have significant impact on performance.

EOF

}


# prints flags depending on what options were requested
function print_requested_flags {

	# if parallel library requested but not installed
	if [ $MB_WANT_PARALLEL -ne 1 ] && [ $A_parallel -eq 1 ]
	then
		echo "(memlog-config) ERROR: libmboard was installed WITHOUT parallel support." >&2
		exit $ERR_NOPARALLEL
	fi

    # Handle CFLAGS
    if [ $A_cflags -eq 1 ]
    then
        
        # prepend basic CFLAGS
        echo -n "-I${MB_INSTALL_INCLUDEDIR} "

        # memlog enabled?
        if [ $MB_WANT_MEMLOG -eq 1 ]
        then
            echo -n "${MB_MEMLOG_CFLAGS} "
        fi

        # for parallel compilation 
        if [ $A_parallel -eq 1 ]
        then
            
            # add phthread support
            echo -n "${MB_PTHREAD_CFLAGS} "

            # if users are not using MPI Compiler wrappers (mpicc, mpcc, ...)
            # they ought to call this script with --mpi which will provide
            # suitable flags to add MPI support
            if [ $A_mpi -eq 1 ]
            then
                echo -n "${MB_MPI_CFLAGS} "
            fi
        fi
    fi

    # Handle LDFLAGS
    if [ $A_ldflags -eq 1 ]
    then
        
        # prepend basic LDFLAGS
        echo -n "-L${MB_INSTALL_LIBDIR} "

        # for parallel compilation
        if [ $A_parallel -eq 1 ]
        then
            
            # add pthread support
            echo -n "${MB_PTHREADS_LDFLAGS} "

            # if users are not using MPI Compiler wrappers (mpicc, mpcc, ...)
            # they ought to call this script with --mpi which will provide
            # suitable flags to add MPI support
            if [ $A_mpi -eq 1 ]
            then
                echo -n "${MB_MPI_LDFLAGS} "
            fi

        fi
    fi

    # Handle LIBS
    if [ $A_libs -eq 1 ]
    then
        
        # for parallel compilation
        if [ $A_parallel -eq 1 ]
        then
            
            if [ $A_debug -eq 1 ]
            then
                # include debug mboard library
                echo -n "${MB_LIB_PARALLEL_DEBUG} "
            else
                # include production mboard library
                echo -n "${MB_LIB_PARALLEL} "
            fi
            
            # add pthread support
            echo -n "${MB_PTHREADS_LIBS} "

            # if users are not using MPI Compiler wrappers (mpicc, mpcc, ...)
            # they ought to call this script with --mpi which will provide
            # suitable flags to add MPI support
            if [ $A_mpi -eq 1 ]
            then
                echo -n "${MB_MPI_LIBS} "
            fi
        
        else # for serial compilation

            if [ $A_debug -eq 1 ]
            then
                # include debug mboard library
                echo -n "${MB_LIB_SERIAL_DEBUG} "
            else
                # include production mboard library
                echo -n "${MB_LIB_SERIAL} "
            fi
            
        fi
        
        # append basic libs
        echo -n "${MB_DEFAULT_LIBS} "
    fi

    # If library was compiled with --enable-memlog, print notice
    if [ $MB_WANT_MEMLOG -eq 1 ]
    then
        echo ""
        print_memlog_warning
    fi    
}

# Convert long option names to associated short option
# Usage: get_short_from_long "longoption"
function get_short_from_long {

    long="$1"

    if [ "$long" == "libs" ] # special case
    then
        char="L"
    else
        char=${long:0:1}  # get first char
    fi
    
    echo $char
}

# prints notice to stderr if the requested option is ignored
# Usage: ignore_option "longoption"
function ignore_option {
    
    # get name of option
    pname=$1
    
    # obtaing value of option (from global var A_optionname)
    eval pval=\$A_$pname
    
    # generate label for option
    onechar=`get_short_from_long $pname`
    label="-${onechar} (--${pname})"
   
    if [ $pval -eq 1 ]
    then
        # print notice
        echo "(mboard-config) WARNING: $label option ignored." >&2
        # set to 0
        eval A_$pname=0
    fi
}

# Check if long option is acceptable
# Uses global var - $acceptable_long_options
# Usage: if `is_acceptable_option "longoption"`; then do_something; fi
function is_acceptable_option {

    option="$1"
    
    # compare with each word in $acceptable_long_options
    # (is there a faster way to do this? Using external commands like sed or 
    # expr would require a spawning a subshell. Not great for performance.)
    for key in $acceptable_long_options
    do
        if [ "$option" == "$key" ]
        then
            echo true
            return 0
        fi
    done

    echo false
}

# Check if long option is acceptable
# Uses global var - $acceptable_short_options
# Usage: if `is_acceptable_short_option "o"`; then do_something; fi
function is_acceptable_short_option {

    option="$1"
    list=$acceptable_short_options
    
    # RHS=(LHS with $option removed)
    # hence, if RHS != LHS, $option exist in list
    if [ "$list" != "${list/$option/}" ]
    then
        echo true
   	else
        echo false
	fi
}

# These lists will be used by functions:
# * is_acceptable_option
# * is_acceptable_short_option
# * parse_long_options
acceptable_long_options="usage help version parallel serial \
                         cflags ldflags debug query libs mpi"
acceptable_short_options="uhvVplscdqLm"


# parse input arguments
# Uses global vars - $acceptable_short_options and $acceptable_long_options
# Usage: parse_input_arguments "--the --list -o -f --input --arguments"
# TODO: Add support for autocompletion (eg. --ver -> --version)
function parse_input_arguments {

    recurse=""
    unmatched=""
    until [ -z $1 ]                         
    do
        case "$1" in
            -u|--usage)      print_usage;; # function will call exit 0
            -h|--help)       print_usage;; # function will call exit 0
            -v|-V|--version) A_version=1 ;;
            -p|--parallel)   A_parallel=1;;
            -l|--ldflags)    A_ldflags=1;;
            -s|--serial)     A_serial=1;;
            -c|--cflags)     A_cflags=1;;
            -d|--debug)      A_debug=1;;
            -q|--query)      A_query=1;;
            -L|--libs)       A_libs=1;;
            -m|--mpi)        A_mpi=1;;

            # capture unmatched options
            *) unmatched="$1 $unmatched";;
        esac
        
        shift # pop first argument from list
    done

    # quit function if all args accounted for
    if [ "$unmatched" == "" ]; then return 0; fi
    
    # handle unmatched options
    for arg in $unmatched
    do

        # if arg starts with '--'
        if [ "${arg:0:2}" == "--" ]
        then

            echo "(mboard-config) ERROR: Unknown option : $arg"
            rtfm $ERR_USAGE
        
        # if arg starts with '-'
        elif [ "${arg:0:1}" == "-" ]
        then
            
            # if only '-'
            if [ "$arg" == "-" ]
            then
                echo "(mboard-config) ERROR: Unknown option : $arg"
                rtfm $ERR_USAGE
            fi
            
            temp_arg=${arg:1} # remove first char ('-')
            
            # did user use -option instead of --option?
            if `is_acceptable_option "$temp_arg"`
            then
                echo "(mboard-config) NOTE: Assuming you meant '--$temp_arg' instead of '-$temp_arg'" >&2
                recurse="--$temp_arg $recurse"
                
            else # treat -xyz as -x -y -z
                  
	            while [ "$temp_arg" != "" ]
	            do
	                # pop first char from $temp_arg
	                firstchar=${temp_arg:0:1}
	                temp_arg=${temp_arg:1}
	                
	                if `is_acceptable_short_option "$firstchar"`
	                then
	                    recurse="-$firstchar $recurse"
	                else
	                    echo "(mboard-config) ERROR: Unknown option : -$firstchar"
	                    rtfm $ERR_USAGE
	                fi
	            done
            
            fi
            
        
        else # if arg does not start with '-'

            if `is_acceptable_option "$arg"`
            then
                echo "(mboard-config) NOTE: Assuming you meant '--$arg' instead of '$arg'" >&2
                recurse="--$arg $recurse"
            else
                echo "(mboard-config) ERROR: Unknown option : $arg"
                rtfm $ERR_USAGE
            fi
            
        fi
    done

    # feed corrected options back into this function
    if [ "$recurse" != "" ]
    then
        parse_input_arguments $recurse
    fi
}

####################### CODE BODY ###########################################

# remove repeated slashes from dirnames (merely for aesthetic reasons)
MB_INSTALL_PREFIX=`echo $MB_INSTALL_PREFIX | tr -s '/'`
MB_INSTALL_LIBDIR=`echo $MB_INSTALL_LIBDIR | tr -s '/'`
MB_INSTALL_BINDIR=`echo $MB_INSTALL_BINDIR | tr -s '/'`
MB_INSTALL_INCLUDEDIR=`echo $MB_INSTALL_INCLUDEDIR | tr -s '/'`

# argument parameters
A_parallel=0 # --parallel
A_ldflags=0  # --ldflags
A_version=0  # --version
A_cflags=0   # --cflags
A_serial=0   # --serial
A_debug=0    # --debug
A_query=0    # --query
A_libs=0     # --libs
A_mpi=0      # --mpi

# calling script without any parameters will print usage info
if [ $# -eq 0 ]; then rtfm ; fi

# parse input args
parse_input_arguments $@

# Handle requests
if [ $A_query -eq 1 ] || [ $A_version -eq 1 ] # --query or --version
then

    # ignore these options (if they were requested)
    ignore_option "parallel" 
    ignore_option "ldflags"
    ignore_option "cflags"
    ignore_option "serial"
    ignore_option "debug"
    ignore_option "libs"
    ignore_option "mpi"

    if [ $A_query -eq 1 ] 
    then 
        print_query
        
        # --query already contains version information.
        # --version can be silently ignored if specified alongside --query
    else
        print_version
    fi
    
else

    # if neither --cflags,--ldflags or --libs were specified, print usage msg
    if [ $A_cflags -eq 0 ] && [ $A_ldflags -eq 0 ] && [ $A_libs -eq 0 ]
    then
        rtfm $ERR_USAGE
    fi
    
    # if neither --serial nor --parallel is specified, default to --serial
    if [ $A_serial -eq 0 ] && [ $A_parallel -eq 0 ]
    then
        A_serial=1;
    fi
    
    # if both --serial and --parallel are specified, ignore --parallel
    if [ $A_serial -eq 1 ] && [ $A_parallel -eq 1 ]
    then
        ignore_option "parallel"
    fi

    # --mpi only makes sense with --parallel
    if [ $A_serial -eq 1 ] && [ $A_mpi -eq 1 ]
    then
        ignore_option "mpi"
    fi

    # print requested flags
    print_requested_flags
    
fi

####################### SCRIPT ENDS #########################################

# How much wood would a woodchuck chuck if a woodchuck could chuck wood?

